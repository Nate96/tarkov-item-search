import * as fs from 'fs';
import { SqliteConnnection } from "./sqlite-connection.js";

// DEBUG db stuff
const db = new SqliteConnnection(':memory:'); // in memory db

// TODO: setup commander in here as this will end up being a cli tool

// TODO: connect these flags to commander
// NOTE: these flags were generated by copilot and may not be necessary
// flags
const flags = {
  // if we want to save the schema to a file
  saveSchema: false,
  // if we want to save the gql query to a file
  saveGql: false,
  // if we want to save the data to a file
  saveData: false,
  // if we want to load the schema from a file
  loadSchema: false,
  // if we want to load the gql query from a file
  loadGql: false,
  // if we want to load the data from a file
  loadData: false,
};

// IMPORTANT
// set which operation we want to do (this determines what query is ran)
// operations: <verb>-<noun>
// verbs: insert, update, delete
// NOTE: this is a simple example, in a real world scenario we would have a more complex way of determining the operation
const operation = 'insert-ammo';

// check if we already have a cached gql query for this operation AND we want to load it
const fileName = `${operation}.gql`;
if (fs.existsSync(fileName) && flags.loadGql) {
  // load the gql query from the file
  const gqlQuery = fs.readFileSync(fileName).toString();
  // run the query
  db.query(gqlQuery, []);
}


// check if we already have a saved schema json


// get a specific set of data from the api


// map api object to a db object


// save the db object to the db